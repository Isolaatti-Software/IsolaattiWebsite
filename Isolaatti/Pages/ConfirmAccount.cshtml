@page "/crear_cuenta"
@using Isolaatti.Config
@using Microsoft.Extensions.Options
@model Isolaatti.Pages.ConfirmAccount
@inject IOptions<ReCaptchaConfig> RecaptchaConfig

@{
    Layout = "Shared/_LayoutWebAppOutside";
    ViewData["Title"] = "Confirmación de cuenta";
}

@section metadata
{
    <meta property="og:url" content="https://isolaatti.com/registrate"/>
    <meta proerty="og-title" content="Regístrate en Isolaatti"/>
    <style>
    @@import url('https://fonts.googleapis.com/css2?family=Rubik+Glitch&display=swap');
    </style>
}

<div class="col-md-3 flex-column"></div>


<div class="col-md-6 d-flex justify-content-center align-items-center">
    <div class="sign-in-up-form-container" id="sign-up">
        <form method="POST" id="make_account_form" class="sign-in-up-form mt-3">
            <input type="hidden" asp-for="State"/>
            <h2>Datos básicos</h2>
            <p>Bien, ahora solo falta que ingreses los siguientes datos básicos para la creación de cuenta.</p>
            <div class="form-group">
                <label for="username_form_control">Nombre de usuario</label>
                <div class="input-group">
                    <input type="text" id="username_form_control" class="form-control" asp-for="Username" v-model="usernameField.value" :class="{'is-invalid': (usernameIsInvalid || (usernameField.isAvailable !== undefined && !usernameField.isAvailable)) && usernameField.hadInput, 'is-valid': usernameField.isAvailable}">
                    <div class="invalid-feedback">
                        <span v-if="usernameField.isAvailable !== undefined && !usernameField.isAvailable">El nombre no está disponible</span>
                        <span v-else>El nombre no es válido. Debe tener al menos 3 caracteres y máximo 20.</span>
                    </div>
                    <div class="valid-feedback">
                        El nombre es válido y está disponible
                    </div>
                </div>

            </div>
            <div class="form-group">
                <label for="displayname_form_control">Nombre para mostrar</label>
                <input type="text" id="displayname_form_control" class="form-control"
                       asp-for="Name" v-model="nameField.value" :class="{ 'is-invalid': nameIsInvalid && nameField.hadInput}">
                <div class="invalid-feedback">
                    El nombre no es válido. Debe tener al menos un caracter y máximo 20.
                </div>
            </div>
            <div class="form-group">
                <label for="password_form_control">Contraseña</label>
                <input type="password" asp-for="Password" id="password_form_control" class="form-control"
                       v-model="passwordField.value" :class="{'is-invalid': passwordIsInvalid && passwordField.hadInput}">
                <div class="invalid-feedback">
                    La contraseña debe ser de al menos 8 caracteres.
                </div>
            </div>
            <div class="form-group">
                <label for="confirm_password_form_control">Confirma contraseña</label>
                <input type="password" asp-for="PasswordConfirmation" id="confirm_password_form_control" class="form-control"
                       v-model="passwordConfirmationField.value" :class="{'is-invalid': passwordUnMatches}">
                <div class="invalid-feedback">
                    La contraseña no coincide. Debes escribir la misma contraseña
                </div>
            </div>

            @if (Model.RecaptchaError)
            {
                <div class="alert alert-danger">Por favor, completa el reCAPTCHA</div>
            }
            <div class="g-recaptcha" data-sitekey="@RecaptchaConfig.Value.Site"></div>
            <div class="d-flex justify-content-center">
                <button class="btn btn-primary" type="submit" :disabled="!canSignUp">Regístrate</button>
            </div>
        </form>
    </div>
</div>
<div class="col-md-3 flex-column"></div>

@section Scripts
{
    <script src="https://www.google.com/recaptcha/api.js" async defer></script>
    <script>
    const name = "@Model.Name";
    const username = "@Model.Username";
    </script>
    <script src="~/js/confirm_account.js"></script>
}
